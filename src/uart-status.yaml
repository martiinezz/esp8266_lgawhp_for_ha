esphome:
  name: lg-status
  platform: ESP8266
  board: d1_mini
  includes:
    - uart-sensor.h

# Enable logging
logger:
  level: INFO
  logs:
    component: NONE
  baud_rate: 0  # Disable logging to UART

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

# Enable OTA updates
ota:
  platform: esphome
  password: !secret ota_password

# Enable Web server
web_server:
  port: 80
  log: true

# WiFi configuration - replace with your details
wifi:
  fast_connect: true
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case of connection failure
  ap:
    ssid: "ThermaV Fallback"
    password: "12345678"

captive_portal:

uart:
  id: uart_bus
  tx_pin: GPIO14
  rx_pin: GPIO13
  baud_rate: 300
  data_bits: 8
  parity: NONE
  stop_bits: 1

# Define text sensors for string data
text_sensor:
  - platform: template
    name: "Power State"
    id: power_state
  - platform: template
    name: "Operation Mode"
    id: operation_mode
  - platform: template
    name: "Outdoor Unit"
    id: outdoor_unit
  - platform: template
    name: "Water Pump"
    id: water_pump
  - platform: template
    name: "Silent Mode"
    id: silent_mode

# Define numeric sensors for temperature readings
sensor:
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
  - platform: template
    name: "Inlet Temperature"
    id: inlet_temp
    unit_of_measurement: "째C"
    accuracy_decimals: 0
  - platform: template
    name: "Outlet Temperature"
    id: outlet_temp
    unit_of_measurement: "째C"
    accuracy_decimals: 0
  - platform: template
    name: "Indoor Temperature"
    id: indoor_temp
    unit_of_measurement: "째C"
    accuracy_decimals: 1
  - platform: template
    name: "Set Temperature"
    id: set_temp
    unit_of_measurement: "째C"
    accuracy_decimals: 0

# Modify your custom component to pass the sensors
custom_component:
  - lambda: |-
      auto uart_sensor = new UARTHexSensor(id(uart_bus));
      // Assign sensors to the custom component
      uart_sensor->power_state_sensor = id(power_state);
      uart_sensor->operation_mode_sensor = id(operation_mode);
      uart_sensor->outdoor_unit_sensor = id(outdoor_unit);
      uart_sensor->water_pump_sensor = id(water_pump);
      uart_sensor->silent_mode_sensor = id(silent_mode);
      uart_sensor->inlet_temp_sensor = id(inlet_temp);
      uart_sensor->outlet_temp_sensor = id(outlet_temp);
      uart_sensor->indoor_temp_sensor = id(indoor_temp);
      uart_sensor->set_temp_sensor = id(set_temp);
      return {uart_sensor};
